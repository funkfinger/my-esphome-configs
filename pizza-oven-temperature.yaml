esphome:
  name: pizza-oven-temperature
  friendly_name: pizza-oven-temperature
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: seeed_xiao_esp32c3
  variant: esp32c3
  framework:
    type: arduino

logger:

api:
  encryption:
    key: !secret pizza_oven_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Pizza-Oven-Temperature AP"
    password: !secret ap_wifi_pw

web_server:
  port: 80

# Define the SPI bus for the MAX6675
# Using XIAO ESP-C3 SPI pins: GPIO8 (CLK), GPIO9 (MISO)
spi:
  clk_pin: GPIO8
  miso_pin: GPIO9

# Define the MAX6675 K-type thermocouple sensor
sensor:
  - platform: max6675
    name: "Pizza Oven Temperature"
    id: pizza_oven_temperature
    cs_pin: GPIO20  # D7
    update_interval: 5s  # Update every 5 seconds
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    filters:
      - median:
          window_size: 5
          send_every: 5
          send_first_at: 1
      - delta: 1.0  # Only report changes greater than 1°C

  # Optional: Add a template sensor to track the maximum temperature
  - platform: template
    name: "Pizza Oven Max Temperature"
    id: max_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer-high"
    update_interval: 60s
    lambda: |-
      if (id(pizza_oven_temperature).state > id(max_temp).state) {
        return id(pizza_oven_temperature).state;
      } else {
        return id(max_temp).state;
      }

# Optional: Convert Celsius to Fahrenheit
  - platform: template
    name: "Pizza Oven Temperature (°F)"
    id: pizza_oven_temperature_f
    unit_of_measurement: "°F"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    update_interval: 5s
    lambda: |-
      if (id(pizza_oven_temperature).has_state()) {
        return id(pizza_oven_temperature).state * 9.0/5.0 + 32.0;
      } else {
        return NAN;
      }

# Optional: Add a button to reset the maximum temperature
button:
  - platform: template
    name: "Reset Max Temperature"
    on_press:
      - lambda: |-
          id(max_temp).publish_state(0);

# Optional: Add a text sensor to show the temperature status
text_sensor:
  - platform: template
    name: "Pizza Oven Status"
    icon: "mdi:fire"
    lambda: |-
      if (id(pizza_oven_temperature).has_state()) {
        float temp = id(pizza_oven_temperature).state;
        if (temp < 100) {
          return {"Heating Up"};
        } else if (temp < 350) {
          return {"Warming"};
        } else if (temp < 450) {
          return {"Ready for Bread"};
        } else if (temp < 550) {
          return {"Perfect for Pizza"};
        } else {
          return {"Very Hot"};
        }
      } else {
        return {"Unknown"};
      }
