esphome:
  name: days-since-last-bird-death
  friendly_name: Days Since Last Bird Death Display

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO  # Your global log level
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret bird_count_display_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Days-Since-Last-Bird-Death"
    password: !secret ap_wifi_pw

captive_portal:

web_server:
  port: 80

# Time synchronization with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

# Import the sensor from Home Assistant
sensor:
  - platform: homeassistant
    name: "Days Since Last Bird Death"
    entity_id: number.days_since_last_bird_death_number
    id: bird_death_days_sensor

# Font configuration for display text
font:
  - file: "gfonts://Roboto"
    id: roboto_font
    size: 20
  - file: "gfonts://Roboto"
    id: roboto_font_lrg
    size: 90

# Display configuration for the TTGO T-Display using the ST7789V driver
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    model: "TTGO_TDISPLAY_135X240"
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 270
    backlight_pin: GPIO4
    lambda: |-
      it.fill(Color(0, 0, 0)); // Clear screen with black background

      // Display "Days Since Bird Death:" centered horizontally
      const char* title = "Days Since Bird Death:";
      int title_x = (it.get_width() - (strlen(title) * 9)) / 2; // Approximate text width calculation
      it.printf(title_x, 5, id(roboto_font), Color(255, 255, 255), title);

      // Display the sensor value or "N/A" centered horizontally
      if (id(bird_death_days_sensor).has_state()) {
        char buffer[10];
        sprintf(buffer, "%d", (int)id(bird_death_days_sensor).state);
        int value_x = (it.get_width() - (strlen(buffer) * 48)) / 2; // Approximate text width calculation for large font
        it.printf(value_x, 30, id(roboto_font_lrg), buffer);
      } else {
        const char* na_text = "N/A";
        int na_x = (it.get_width() - (strlen(na_text) * 48)) / 2; // Approximate text width calculation for large font
        it.printf(na_x, 30, id(roboto_font_lrg), Color(255, 0, 0), na_text);
      }
